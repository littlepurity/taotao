<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 扫描dao接口 -->
    <context:component-scan base-package="com.chenjin.taotao.mapper" use-default-filters="false">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 引入数据库相关信息的配置文件 -->
    <context:property-placeholder location="classpath:properties/db.properties" />

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- druid连接池私有属性 -->
        <property name="maxActive" value="30" />
        <property name="minIdle" value="10" />
    </bean>

    <!-- 最后关键一步，如何整合mybatis -->
    <!-- 1 注入一股mybatis的sqlSessionFactory这就是我们所要做的关键步骤 2 声明式的事务管理 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--指定mybatis全局配置文件的路径-->
        <!--<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>-->
        <!--指定mapper文件位置-->
        <!--<property name="mapperLocations" value="classpath:com.chenjin.ssm.mapper/*.xml"></property>-->
        <!-- mybatis全局配置文件相关内容可在这里配置 -->
        <!--<property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                &lt;!&ndash; 加入驼峰命名 &ndash;&gt;
                <property name="mapUnderscoreToCamelCase" value="true" />
                &lt;!&ndash;<property name="logImpl" value="STDOUT_LOGGING" />&ndash;&gt;
            </bean>
        </property>
        <property name="typeAliasesPackage" value="com.chenjin.ssm.bean" />-->

        <!-- 插件配置 -->
        <property name="plugins">
            <array>
                <!-- 分页插件，使用拦截器完成分页功能 -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- Mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.chenjin.taotao.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务管理 使用数据源事务管理类进行管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 确定事务管理的策略 transaction-manager指向上面的transactionManager -->
    <tx:advice transaction-manager="transactionManager" id="txAdvice">
        <!-- 事务处理的相关值以及它的传播性 -->
        <tx:attributes>
            <!-- 查询相关配置为只读 select或者get或者query开头 -->
            <tx:method name="select*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <!-- 使用aop对事务管理的范围进行织入 明确几个点 1 对哪些地方需要进行事务的管理 execution书写，明确边界
         2 使用什么策略去管理 策略我们使用了tx:advice全部写于其中，在aop的advisor中只需要去引用即可 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.chenjin.taotao.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>

    <!-- 采用注解进行事务配置，请在Service的实现类上面加上@Transactional注解 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
</beans>